import 'package:flutter/material.dart';import 'package:flutter_riverpod/flutter_riverpod.dart';import 'package:project_nomufinder/services/lawyer_data_loader.dart';import 'package:flutter_dotenv/flutter_dotenv.dart';import 'package:firebase_core/firebase_core.dart';import 'package:firebase_messaging/firebase_messaging.dart';import 'package:go_router/go_router.dart';import 'package:project_nomufinder/config/router.dart';import 'config/providers.dart';import 'firebase_options.dart';import 'package:project_nomufinder/viewmodels/auth_provider.dart';Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {  print('💬 백그라운드 메시지 수신: ${message.messageId}');}Future<void> main() async {  WidgetsFlutterBinding.ensureInitialized();  // ✅ Firebase 초기화 (중복 초기화 방지)  try {    if (Firebase.apps.isEmpty) {      await Firebase.initializeApp(        options: DefaultFirebaseOptions.currentPlatform,      );      print("✅ Firebase 초기화 성공");    } else {      print("✅ Firebase 이미 초기화됨");    }  } catch (e) {    print("❌ Firebase 초기화 실패: $e");  }  // .env 환경 변수 로드  await dotenv.load(fileName: ".env");  // JSON 데이터 로드 (노무사 데이터 등)  await loadLawyerData();  // ✅ FCM 초기화 및 권한 요청  FirebaseMessaging messaging = FirebaseMessaging.instance;  NotificationSettings settings = await messaging.requestPermission(    alert: true,    badge: true,    sound: true,  );  print('🛠️ 권한 설정: ${settings.authorizationStatus}');  // ✅ 토큰 가져오기  String? token = await messaging.getToken();  print('🔥 FCM 토큰: $token');  // ✅ 백그라운드 메시지 핸들러 등록  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);  // ✅ 포그라운드 메시지 리스너 등록  FirebaseMessaging.onMessage.listen((RemoteMessage message) {    print('💬 포그라운드 메시지 수신!');    print('Message data: ${message.data}');    if (message.notification != null) {      print('💬 알림 내용: ${message.notification}');      // UI 업데이트 또는 알림 표시 로직 (예: 스낵바, 다이얼로그 등)    }  });  runApp(const ProviderScope(child: MyApp()));}class MyApp extends ConsumerWidget {  const MyApp({super.key});  @override  Widget build(BuildContext context, WidgetRef ref) {    final authState = ref.watch(authStateProvider);    final router = ref.watch(routerProvider);    return MaterialApp.router(      routerConfig: router,      debugShowCheckedModeBanner: false,      title: 'NomuFinder',      theme: ThemeData(useMaterial3: true),      builder: (context, child) {        return authState.when(          data: (user) => child!,          loading: () => const Center(child: CircularProgressIndicator()),          error: (e, _) => Center(child: Text('에러: $e')),        );      },    );  }}