import google.generativeai as genai
import os
import random
from dotenv import load_dotenv
from fastapi import FastAPI, Query
from fastapi import APIRouter
from pydantic import BaseModel

# 🔐 환경 변수 로드
load_dotenv()
api_key = os.getenv("GOOGLE_API_KEY")
if not api_key:
    raise Exception("❌ GOOGLE_API_KEY 환경변수가 없습니다.")

genai.configure(api_key=api_key)
model_name = "models/gemini-1.5-pro-latest"
model = genai.GenerativeModel(model_name=model_name)

router = APIRouter()

# ✅ 사용자 입력용 모델
class UserInput(BaseModel):
    text: str

# ✅ 카테고리별 Few-shot 예제 목록 (전체 90문장 반영)
fewshot_examples = [
    # 사업주용 (카테고리별 5개)
    ("직원 인사평가 시스템 개선이 필요해요", "기업자문"),
    ("조직 개편에 따른 법률 자문을 받고 싶습니다", "기업자문"),
    ("사내 규정 개정을 준비 중입니다", "기업자문"),
    ("해고 통보 전 법적 절차를 알고 싶습니다", "기업자문"),
    ("휴게시간 설정에 대해 문의드려요", "기업자문"),
    ("직무분석을 위한 전문 컨설팅을 받고 싶어요", "컨설팅"),
    ("사내 복지 제도 개선을 위한 조언이 필요해요", "컨설팅"),
    ("인사 관리 방안에 대해 외부 컨설팅을 받고 싶습니다", "컨설팅"),
    ("경영성과 평가 방법을 바꾸고 싶습니다", "컨설팅"),
    ("직급체계를 정비하려고 합니다", "컨설팅"),
    ("급여 계산을 외주화하고 싶어요", "급여 아웃소싱"),
    ("퇴직금 지급 업무를 외부에 맡기고 싶습니다", "급여 아웃소싱"),
    ("복잡한 급여 처리를 외부에서 도와줬으면 합니다", "급여 아웃소싱"),
    ("사내 급여 산정 기준을 검토받고 싶어요", "급여 아웃소싱"),
    ("급여 지급과 관련된 민원이 많아 자문이 필요해요", "급여 아웃소싱"),
    ("노조와의 단체협약 체결이 필요합니다", "노동조합"),
    ("파업 대응 방안에 대해 논의하고 싶어요", "노동조합"),
    ("노조 설립에 대한 법적 대응이 필요해요", "노동조합"),
    ("쟁의행위 발생 시 절차를 알고 싶습니다", "노동조합"),
    ("노사 협상 중 중재가 필요한 상황입니다", "노동조합"),
    ("산재보험 관련 교육을 직원에게 제공하고 싶어요", "산업재해"),
    ("작업장 내 안전 기준을 점검받고 싶습니다", "산업재해"),
    ("산업재해 예방 대책을 마련하고 싶어요", "산업재해"),
    ("최근 사고 이후 절차 검토가 필요합니다", "산업재해"),
    ("산재 신고 누락에 대한 책임이 궁금해요", "산업재해"),

    # 근로자용 (카테고리별 5개)
    ("퇴사했는데 마지막 월급을 안 줘요", "임금체불"),
    ("수당 없이 야근을 계속 시킵니다", "임금체불"),
    ("퇴직금을 적게 받았어요", "임금체불"),
    ("주휴수당을 한 번도 받은 적이 없습니다", "임금체불"),
    ("급여 일부가 현물로 지급돼요", "임금체불"),
    ("출근했더니 해고 통보를 받았습니다", "부당해고"),
    ("휴가 다녀왔더니 계약을 해지당했어요", "부당해고"),
    ("퇴사 강요를 받고 있습니다", "부당해고"),
    ("감정적인 이유로 잘렸습니다", "부당해고"),
    ("근로계약서와 다르게 계약 종료됐어요", "부당해고"),
    ("계약서를 쓰지 않았습니다", "근로계약"),
    ("계약서에 불리한 내용이 있습니다", "근로계약"),
    ("근로시간이 계약서와 달라요", "근로계약"),
    ("계약 내용 변경을 사전 고지받지 못했습니다", "근로계약"),
    ("고용형태를 다르게 기재했습니다", "근로계약"),
    ("야근을 해도 수당이 없어요", "근무조건"),
    ("휴게시간이 보장되지 않아요", "근무조건"),
    ("휴일근무 시 대체휴일도 없습니다", "근무조건"),
    ("근로시간이 계속 늘어나고 있습니다", "근무조건"),
    ("근무환경이 너무 열악합니다", "근무조건"),
    ("부서장이 성희롱 발언을 했습니다", "직장 내 성희롱"),
    ("상사가 외모로 평가해요", "직장 내 성희롱"),
    ("회식 자리에서 성적 농담을 들었습니다", "직장 내 성희롱"),
    ("피해 사실을 말했더니 무시당했습니다", "직장 내 성희롱"),
    ("성희롱 신고 후 오히려 불이익을 받았어요", "직장 내 성희롱"),
    ("출산 후 복직했더니 부서가 바뀌었습니다", "직장 내 차별"),
    ("육아휴직 후 복귀했더니 자리 이동됐어요", "직장 내 차별"),
    ("임신하자 업무 배제가 됐습니다", "직장 내 차별"),
    ("정규직과 비정규직 차별이 심해요", "직장 내 차별"),
    ("남녀 간 급여 차이가 존재합니다", "직장 내 차별"),
    ("사적인 이유로 팀장이 괴롭혀요", "직장 내 괴롭힘"),
    ("상사가 계속 소리를 지릅니다", "직장 내 괴롭힘"),
    ("업무를 일부러 과도하게 줘요", "직장 내 괴롭힘"),
    ("동료들과의 단절을 유도합니다", "직장 내 괴롭힘"),
    ("퇴근 후에도 업무 지시가 옵니다", "직장 내 괴롭힘"),
    ("작업 중 사고가 났는데 산재 처리가 안돼요", "산업재해"),
    ("출퇴근 중 사고가 발생했어요", "산업재해"),
    ("산업재해 신청 절차를 알고 싶습니다", "산업재해"),
    ("산재 치료비가 지원되지 않았습니다", "산업재해"),
    ("산재 인정이 거절됐어요", "산업재해"),
]

# ✅ 분류용 함수
def classify_text_with_gemini(user_input: str) -> str:
    random.shuffle(fewshot_examples)
    shots = "\n".join([f"문장: {ex}\n카테고리: {cat}" for ex, cat in fewshot_examples[:10]])
    prompt = f"""
    다음 문장을 아래 카테고리 중 하나로 분류하세요:
    [기업자문, 컨설팅, 급여 아웃소싱, 임금체불, 부당해고, 직장 내 괴롭힘, 직장 내 성희롱, 노동조합, 산업재해,
    부당해고, 부당징계, 근로계약, 근무조건, 직장 내 성희롱, 직장 내 차별, 임금체불, 직장 내 괴롭힘, 산업재해, 노동조합]

    {shots}

    문장: {user_input}
    카테고리:
    """
    try:
        response = model.generate_content(prompt)
        if response.candidates and response.candidates[0].content.parts:
            text = response.candidates[0].content.parts[0].text.strip()
            for line in text.splitlines():
                if "카테고리:" in line:
                    return line.split("카테고리:")[1].strip()
        return "카테고리를 찾을 수 없습니다"
    except Exception as e:
        print("❌ Gemini API 호출 오류:", e)
        return f"분류 실패: {e}"

# ✅ 분류 API
@router.post("/classify")
async def classify_endpoint(user_input: UserInput):
    result = classify_text_with_gemini(user_input.text)
    return {"category": result}

# ✅ 로컬 테스트용
if __name__ == "__main__":
    test_inputs = [
        "급여 일부가 현물로 지급돼요",
        "사내 인사평가 시스템을 개선하고 싶어요",
    ]
    for text in test_inputs:
        print(f"입력: {text} → 분류 결과: {classify_text_with_gemini(text)}")