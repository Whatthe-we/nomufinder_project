import os
import random
from fastapi import APIRouter
from pydantic import BaseModel
from typing import Optional
from openai import OpenAI
from datetime import datetime
import time

# 라우터 초기화
router = APIRouter()

# 전역 키 설정
client: OpenAI = None

def set_openai_api_key(api_key: str):
    global client
    client = OpenAI(api_key=api_key)

# 사용자 입력 모델
class UserInput(BaseModel):
    text: str

# 자동완성 키워드 맵
autocomplete_map = {
    "부당해고": ["해고", "해고예고수당", "수습기간 해고", "권고사직", "부당해고 기준", "해고 실업급여", "해고사유", "부당해고 사례", "정규직 해고", "부당해고 구제신청"],
    "부당징계": ["징계", "정직", "감봉", "해고", "경고", "징계위원회", "징계사유 미통보", "징계절차 위반", "이중징계", "대기발령"],
    "근로계약": ["근로계약서 미작성", "근로계약서 작성시기", "근로계약서 위반", "아르바이트 근로계약서 양식", "근로계약 만료 통보서", "근로계약 해지", "무기계약직 전환", "불리한 계약 조건", "수습 계약서", "계약 연장 거절"],
    "근무조건": ["근로조건", "근무조건 변경", "근무조건 실업급여", "근무조건 변경 퇴사", "근무조건 변경 퇴직금", "근무조건 다름", "주휴수당 미지급", "유급휴가", "교대근무", "초과근무 강요"],
    "직장내성희롱": ["성희롱", "성추행", "성희롱 예방교육", "성희롱 처벌", "성희롱 피해 입증", "성희롱 신고", "성희롱 사례", "성희롱 퇴사", "성희롱 실업급여", "성희롱 2차 가해"],
    "직장내괴롭힘": ["괴롭힘", "직장 내 괴롭힘 처벌", "직장 내 괴롭힘 증거", "괴롭힘 사례", "직장 내 괴롭힘 실업급여", "괴롭힘 퇴사", "괴롭힘 처벌기준", "직장 내 괴롭힘 무고", "직장 내 괴롭힘 신고", "직장 내 왕따"],
    "직장내차별": ["차별", "성차별", "나이 차별", "출산휴가 불이익", "육아휴직 불이익", "직무 차별", "기간제 차별", "비정규직 차별", "장애인 차별", "업무 배정 차별"],
    "임금/퇴직금": ["최저임금", "임금체불 신고", "임금피크제", "임금 뜻", "평균임금", "최저임금 위반", "퇴직금 지급기준", "퇴직금 계산", "퇴직금 지급기한", "퇴직금 세금", "퇴직금 IRP", "퇴직금 미지급 신고"],
    "산업재해": ["산재", "산업재해조사표", "중대산업재해", "산업재해 보상", "산업재해기록 보존기간", "산업안전보건법", "중대재해처벌법", "출퇴근 사고", "산업안전교육", "산업안전 컨설팅"],
    "노동조합": ["노조", "노동조합 뜻", "파업", "단체교섭", "임금 협상", "노동조합 교육", "교섭대표 노조", "노조 활동 불이익", "근로시간 면제제도", "노동조합비"],
    "기업자문": ["기업 노무자문", "노무법인 자문", "노무사 자문계약", "노무 대행", "인사규정 정비", "임금체계 개편", "취업규칙 제개정", "근로감독 대응", "노사관계 전략", "노동법 개정 대응"],
    "컨설팅": ["인사노무 컨설팅", "노무사 컨설팅", "노무 컨설팅 비용", "급여 컨설팅" "IT 컨설팅", "성과관리 컨설팅", "직무분석 컨설팅", "ESG 컨설팅", "평가제도 컨설팅", "채용 컨설팅"],
    "급여아웃소싱": ["급여 프로그램", "급여 관리", "급여 대행", "노무법인 급여 아웃소싱", "급여 아웃소싱 후기", "급여 아웃소싱 수수료", "퇴직금 정산", "4대 보험 신고 대행", "4대보험 및 원천징수", "급여 명세서 발급"]
}
# 카테고리 목록
categories = list(autocomplete_map.keys())

# Few-shot 예시
business_examples = [
    '"무단결근한 직원의 해고가 가능한지 궁금해요" -> 부당해고',
    '"신규 사업 개시로 인해 인력 구조조정이 필요해요" -> 부당해고',
    '"지각이 잦은 직원에게 징계 가능한가요?" -> 부당징계',
    '"급여 이체가 지연되었는데 어떻게 대응해야 할까요?" -> 임금/퇴직금',
    '"성희롱 신고가 접수됐을 때 기업의 책임은?" -> 직장내성희롱',
    '"직원이 괴롭힘을 당했다고 주장해요" -> 직장내괴롭힘',
    '"산재 발생 후 회사 책임 범위를 알고 싶어요" -> 산업재해',
    '"노조가 단체행동을 예고했어요. 대응법이 있나요?" -> 노동조합',
    '"직원 평가 기준을 새로 만들고 싶어요" -> 기업자문',
    '"근로자 만족도 조사 설계가 필요합니다" -> 컨설팅',
    '"급여 시스템을 외부에 맡기려 합니다" -> 급여아웃소싱'
    '"정리해고 절차를 사전에 준비하려 합니다." -> 기업자문',
    '"근로감독 대비 체크리스트를 만들고 싶습니다." -> 기업자문',
    '"우리 회사 조직문화를 진단하고 싶습니다" -> 컨설팅',
    '"인사평가 제도 도입 컨설팅을 받고 싶어요" -> 컨설팅',
]

worker_examples = [
    '"정당한 이유 없이 해고 통보를 받았어요" -> 부당해고',
    '"출근 태도 문제로 갑자기 징계를 받았어요" -> 부당징계',
    '"근로계약서에 명시된 조건과 실제 근로조건이 다릅니다" -> 근로계약',
    '"주말에 계속 근무하고 있는데 수당이 없어요" -> 임금/퇴직금',
    '"상사가 외모에 대해 말해요" -> 직장내성희롱',
    '"혼자 일하게 만들어요" -> 직장내괴롭힘',
    '"나이 때문에 승진에서 제외됐어요" -> 직장내차별',
    '"월급이 계속 지연되고 있어요" -> 임금/퇴직금',
    '"출퇴근 중 사고인데 처리가 안 됩니다" -> 산업재해',
    '"노조에 가입했더니 불이익을 받았어요" -> 노동조합'
    '"정규직과 비정규직의 연차 사용이 다릅니다" -> 직장내차별',
    '"출산휴가 복귀 후 부서 변경 통보 받았습니다" -> 직장내차별',
    '"육아휴직 후 인사상 불이익을 받은 것 같아요" -> 직장내차별',
    '"이유도 모르고 정직 처분 받았어요" -> 부당징계',
    '"수습기간 중 별다른 문제 없었는데 나오지말래요" -> 부당해고',
    '"계약 기간 끝나자마자 재계약 거절 당했어요" -> 부당해고',
]

casual_examples = [
    '"월급 안줌" -> 임금/퇴직금',
    '"상사 개짜증. 욕함. 어떻게 신고?" -> 직장내괴롭힘',
    '"계약서도 안주고 일만 시켜요" -> 근로계약',
    '"수습 끝나자마자 해고ㅋㅋ" -> 부당해고',
    '"주60시간 넘게 일함.. 이것도 괜찮은 건가요?" -> 근무조건',
    '"성희롱 신고했더니 일 더 시켜요" -> 직장내성희롱',
    '"다쳐도 산재처리 안 해줌" -> 산업재해',
    '"노조가입했더니 부서이동ㅠㅠ" -> 노동조합',
    '"계약직인데 계약서 안 씀" -> 근로계약',
    '"매일 회식서 성적 농담해요;;" -> 직장내성희롱'
]

fewshot_base = business_examples + worker_examples + casual_examples

# 생성 함수
def generate_prompt(user_input: str, examples: list[str], categories: list[str]) -> str:
    return f"""당신은 한국의 노동문제를 분류하는 AI 어시스턴트입니다.

특히 다음을 주의하세요:
- 사용자가 자신의 권리 침해를 호소하면 근로자 관련 카테고리(근무조건 등)로 분류하세요.
- 사용자가 규정 개정, 제도 개선, 리스크 점검 등을 문의하면 사업주 관련 카테고리(기업자문 등)로 분류하세요.

- "정직", "감봉", "경고", "대기발령" 등은 부당징계에 해당할 가능성이 높습니다.
- "해고 통보", "계약만료 통보", "수습 해고", "권고사직", "자르다", "내보내다" 등은 부당해고에 해당할 가능성이 높습니다.
- "모욕", "업무 배제", "사적 업무 지시","욕설", "폭력", "따돌림"은 직장내괴롭힘에 해당할 가능성이 높습니다.
- "성적 농담", "신체 접촉"은 직장내성희롱에 해당할 가능성이 높습니다.
- "연령·나이 제한", 육아휴직 불이익", "출산휴가 불이익", "장애인 차별", "비정규직 차별", "정년 차별", "동일노동 동일임금"은 직장내차별에 해당할 가능성이 높습니다.
- "노조", "파업", "단체교섭"은 노동조합에 해당할 가능성이 높습니다.
- "컨설팅", "구조 개편", "체계 개편"은 컨설팅에 해당할 가능성이 높습니다.
- "산재", "산업안전", "다침", "질병", "요양" 등은 산업재해에 해당할 가능성이 높습니다.

아래 문장은 실제 근로자/사업주가 질문한 내용입니다.
문장의 뉘앙스를 주의 깊게 분석하고, 이 문장을 가장 잘 설명하는 카테고리를 다음 중 하나로 선택하세요:

- {chr(10).join(f"- {cat}" for cat in categories)}

규칙:
- 반드시 위 카테고리 중 하나만 출력하세요.
- 다른 말은 출력하지 마세요.
- 분류가 어려워도 가장 유사한 카테고리를 선택하세요.

예시:
{chr(10).join(examples)}

사용자 문장:
"{user_input}"

👉 카테고리:"""

# 출력 정제 로직
def clean_category_output(result: str) -> str:
    for cat in categories:
        if cat in result:
            return cat
    return "분류 실패"

# 분류 함수
def classify_text_with_openai(user_input: str) -> str:
    start = time.time()

    # ✅ 중요한 오답 포인트는 항상 포함
    core_examples = [
        '"이유도 모르고 정직 처분 받았어요" -> 부당징계',
        '"하루 아침에 나가라는 통보를 받았어요" -> 부당해고',
        '"상사가 욕설을 합니다" -> 직장내괴롭힘',
        '"육아휴직 후 다른 부서로 배치해도 되나요?" -> 직장내차별',
        '"취업규칙 개정할 때 필요한 절차는?" -> 기업자문',
    ]

    # ✅ 추가로 랜덤 샘플
    examples = (
        core_examples +
        random.sample(business_examples, 2) +
        random.sample(worker_examples, 2) +
        random.sample(casual_examples, 2)
    )

    prompt = generate_prompt(user_input, examples, categories)

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3,
            max_tokens=50,
        )
        raw_result = response.choices[0].message.content.strip()
        print(f"🔍 Raw Output: {raw_result}")
        print(f"⏱️ GPT 응답 시간: {time.time() - start:.2f}초")

        cleaned = clean_category_output(raw_result)

        return cleaned
    except Exception as e:
        print("❌ OpenAI API 오류:", e)
        return "분류 실패"

# FastAPI 엔드포인트
@router.post("/classify")
async def classify_endpoint(user_input: UserInput):
    result = classify_text_with_openai(user_input.text)

    # 자동완성 키워드 매칭
    suggestions = autocomplete_map.get(result, [])

    return {
        "category": result,
        "suggestions": suggestions
    }